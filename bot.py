import requests
import json
import asyncio
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# ====================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ====================

TELEGRAM_BOT_TOKEN = "8294257120:AAEwUsIRVTeopgwjWajzbulDx-P_yZFHd1A"
OPENROUTER_API_KEY = "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"
API_URL = "https://router.huggingface.co/v1/chat/completions"

# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
MODEL_NAME = "meta-llama/Llama-3.1-8B-Instruct"  # –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å

# ====================
# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ü–†–û–°–ê –ö OPENROUTER API
# ====================

async def get_ai_response(user_message: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏.
    """
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://localhost",
        "X-Title": "Telegram AI Bot"
    }

    payload = {
        "model": MODEL_NAME,
        "messages": [
            {
                "role": "system", 
                "content": """–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ —Ä–µ—à–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏.

                    –û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
                    - –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, –≤–µ–∂–ª–∏–≤—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
                    - –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                    - –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ - —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π—Å—è
                    - –°–æ—Ö—Ä–∞–Ω—è–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
                    - –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–Ω

                    –¢–í–û–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
                    - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                    - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (—Å–æ–æ–±—â–µ–Ω–∏—è, –∏–¥–µ–∏, —Å–ø–∏—Å–∫–∏)
                    - –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
                    - –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
                    - –ü–æ–º–æ–≥–∞—Ç—å —Å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏

                    –ü–†–ê–í–ò–õ–ê:
                    - –ù–µ –ø—Ä–∏—Ç–≤–æ—Ä—è–π—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º
                    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                    - –ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
                    - –£–≤–∞–∂–∞–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                    - –ë—É–¥—å —á–µ—Å—Ç–µ–Ω –æ —Å–≤–æ–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö"""
            },
            {
                "role": "user",
                "content": user_message
            }
        ],
        "max_tokens": 300,
        "temperature": 0.7
    }

    try:
        print("üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")

        if response.status_code != 200:
            error_msg = f"–û—à–∏–±–∫–∞ API: HTTP {response.status_code}. –û—Ç–≤–µ—Ç: {response.text[:200]}"
            print(f"‚ùå {error_msg}")
            return f"‚ö†Ô∏è {error_msg}"

        response_data = response.json()
        print(f"üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {json.dumps(response_data, indent=2, ensure_ascii=False)}")

        # –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º reasoning-–º–æ–¥–µ–ª–∏
        if ('choices' in response_data and 
                len(response_data['choices']) > 0 and 
                'message' in response_data['choices'][0]):
            
            message = response_data['choices'][0]['message']
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
            if message.get('content') and message['content'] is not None:
                ai_response = message['content'].strip()
            # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç, –±–µ—Ä–µ–º reasoning_content
            elif message.get('reasoning_content') and message['reasoning_content'] is not None:
                print("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º reasoning_content –∫–∞–∫ –æ—Ç–≤–µ—Ç")
                ai_response = message['reasoning_content'].strip()
                # –û—á–∏—â–∞–µ–º reasoning –æ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
                ai_response = clean_reasoning_response(ai_response)
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
            
            return ai_response
        else:
            return "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API."

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
        print(f"‚ùå {error_msg}")
        return f"‚ö†Ô∏è {error_msg}"

def clean_reasoning_response(reasoning_text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç reasoning-–æ—Ç–≤–µ—Ç, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = reasoning_text.split('\n')
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    russian_lines = []
    for line in lines:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
        if any('\u0400' <= char <= '\u04FF' for char in line):
            russian_lines.append(line)
    
    if russian_lines:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä—É—Å—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)
        clean_response = ' '.join(russian_lines[-2:]) if len(russian_lines) > 2 else ' '.join(russian_lines)
        return clean_response.strip()
    else:
        # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        return reasoning_text

def aggressive_clean_response(response: str) -> str:
    """
    –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª—é–±—ã—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.
    """
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ—á—å
    lines = response.split('\n')
    clean_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # –£–î–ê–õ–Ø–ï–ú —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ (—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è)
        if any(word in line.lower() for word in ['i think', 'i should', 'the user', 'alright', 'let me', 'also', 'means', 'which means']):
            continue
            
        # –£–î–ê–õ–Ø–ï–ú —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –∞–Ω–∞–ª–∏–∑
        if line.startswith(('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'User', 'The user', 'I ', '–ú—ã ')) and '–∑–Ω–∞—á–∏—Ç' in line.lower():
            continue
            
        # –£–î–ê–õ–Ø–ï–ú —Å—Ç—Ä–æ–∫–∏ —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ (–∫—Ä–æ–º–µ —Å–º–∞–π–ª–∏–∫–æ–≤)
        if any(c in 'abcdefghijklmnopqrstuvwxyz' for c in line.lower()) and not any(c in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for c in line.lower()):
            continue
            
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ—á—å
        if any(c in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for c in line.lower()):
            clean_lines.append(line)
        elif len(line) < 50:  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–º–∞–π–ª–∏–∫ –∏ —Ç.–¥.)
            clean_lines.append(line)
    
    result = ' '.join(clean_lines)
    
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    if not result:
        for line in lines:
            if any(c in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for c in line.lower()):
                return line.strip()
    
    return result if result else "–ù–µ –ø–æ–Ω—è–ª... –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"

# ====================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í TELEGRAM
# ====================

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        message = update.message or update.edited_message or getattr(update, 'business_message', None)
        if not message or not message.text:
            return

        user_message = message.text
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            ai_response = await get_ai_response(user_message)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
            ai_response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

        # ‚≠ê‚≠ê‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø ‚≠ê‚≠ê‚≠ê
        
        # –ü–æ–ª—É—á–∞–µ–º business_connection_id –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        business_connection_id = getattr(update, 'business_connection_id', None)
        print(f"üîç Business connection ID: {business_connection_id}")
        
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å business_connection_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if business_connection_id:
                await context.bot.send_message(
                    chat_id=message.chat_id,
                    text=ai_response,
                    business_connection_id=business_connection_id
                )
                print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            else:
                # –ï—Å–ª–∏ business_connection_id –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Å–ø–æ—Å–æ–±
                await context.bot.send_message(
                    chat_id=message.chat_id,
                    text=ai_response
                )
                print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º")
                
        except Exception as send_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
            
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                await message.reply_text(ai_response)
                print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ reply_text")
            except Exception as reply_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ reply_text: {reply_error}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü—Ä–∏–≤–µ—Ç' –∏–ª–∏ '–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç'")
    application.run_polling()

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–ª—É—à–∞–µ—Ç 0.0.0.0 –∏ –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
import os

if __name__ == '__main__':
    # –í–∞—à–∞ –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Application
    application = Application.builder().token("8294257120:AAEwUsIRVTeopgwjWajzbulDx-P_yZFHd1A").build()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥. –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –æ–±—ã—á–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ,
    # —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º.
    application.run_polling()